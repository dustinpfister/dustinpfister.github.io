/*
   canvas-example-math-log
   Copyright 2020 by Dustin Pfister
   https://raw.githubusercontent.com/dustinpfister/canvas-examples/master/LICENSE
 
   https://github.com/dustinpfister/canvas-examples
*/
var utils={};utils.logPer=function(per,a,b){a=a===undefined?2:a;b=b===undefined?a:b;per=per<0?0:per;per=per>1?1:per;return Math.log(1+a-2+per)/Math.log(b)};utils.createLogPerPoints=function(a,b,sx,sy,w,h,len){var points=[],i=0,x,y,per,logPer;while(i<len){per=i/len;logPer=utils.logPer(per,a,b);x=sx+w/(len-1)*i;y=sy+h-logPer*h;points.push({x:x,y:y,per:per,logPer:logPer,perY:sy+h-h*per});i+=1}return points};utils.createCanvas=function(opt){opt=opt||{};opt.container=opt.container||document.getElementById("canvas-app")||document.body;opt.canvas=document.createElement("canvas");opt.ctx=opt.canvas.getContext("2d");opt.canvas.className="canvas_example";opt.canvas.width=opt.width===undefined?320:opt.width;opt.canvas.height=opt.height===undefined?240:opt.height;opt.ctx.translate(.5,.5);opt.canvas.onselectstart=function(){return false};opt.canvas.style.imageRendering="pixelated";opt.ctx.imageSmoothingEnabled=false;opt.container.appendChild(opt.canvas);return opt};utils.getCanvasRelative=function(e){var canvas=e.target,bx=canvas.getBoundingClientRect(),pos={x:(e.changedTouches?e.changedTouches[0].clientX:e.clientX)-bx.left,y:(e.changedTouches?e.changedTouches[0].clientY:e.clientY)-bx.top,bx:bx};pos.x=Math.floor(pos.x/canvas.scrollWidth*canvas.width);pos.y=Math.floor(pos.y/canvas.scrollHeight*canvas.height);e.preventDefault();return pos};var draw={};draw.back=function(ctx,canvas){ctx.fillStyle="black";ctx.fillRect(0,0,canvas.width,canvas.height)};draw.box=function(ctx,box,style){ctx.fillStyle=style||"grey";ctx.strokeStyle="#afafaf";ctx.beginPath();ctx.rect(box.x,box.y,box.w,box.h);ctx.fill();ctx.stroke();ctx.strokeStyle="red"};draw.points=function(ctx,points){ctx.lineWidth=3;ctx.beginPath();ctx.moveTo(points[0].x,points[0].y);var i=1;while(i<points.length){ctx.lineTo(points[i].x,points[i].y);i+=1}ctx.stroke()};draw.logPerPoints=function(ctx,state){draw.box(ctx,state.backBox);draw.points(ctx,state.points);ctx.strokeStyle="lime";draw.points(ctx,state.points.map(function(point){return{x:point.x,y:point.perY}}));draw.currentPoints(ctx,state)};draw.currentPoints=function(ctx,state){var cp=state.currentPoint;ctx.strokeStyle="white";ctx.beginPath();ctx.arc(cp.x,cp.y,5,0,Math.PI*2);ctx.stroke();ctx.beginPath();ctx.arc(cp.x,cp.perY,5,0,Math.PI*2);ctx.stroke()};draw.info=function(ctx,state){var cp=state.currentPoint;ctx.fillStyle="rgba(255,255,255,1)";ctx.textBaseline="top";ctx.fillText("v"+state.ver,10,10);ctx.fillText("a: "+state.a.toFixed(2)+", b: "+state.b.toFixed(2),10,20);ctx.fillText("current: "+Math.floor(cp.x)+","+Math.floor(cp.y),10,30)};var demo={};demo.createState=function(canvas){var state={ver:"0.1.1",canvas:canvas,points:[],a:2.2,b:2.5,maxHigh:5,bias:0,per:0,i:0,iMax:250,IPS:10,lt:new Date,FPS:30,currentPoint:{},backBox:{x:60,y:20,w:200,h:200},boxPer:{x:0,y:64,w:32,h:32,heading:0,pps:0},boxLogPer:{x:0,y:128,w:32,h:32,heading:0,pps:0}};state.points=utils.createLogPerPoints(state.a,state.b,state.backBox.x,state.backBox.y,state.backBox.w,state.backBox.h,100);return state};demo.update=function(state,secs){var cp=state.currentPoint;state.i+=state.IPS*secs;state.i%=state.iMax;state.per=state.i/state.iMax;state.bias=1-Math.abs(.5-state.per)/.5;state.boxLogPer.pps=512*cp.logPer;state.boxPer.pps=512*cp.per;demo.moveBox(state.boxLogPer,state,secs);demo.moveBox(state.boxPer,state,secs)};demo.moveBox=function(box,state,secs){if(box.x>canvas.width+box.w){box.x=box.w*-1}if(box.x<box.w*-1){box.x=canvas.width+box.w}if(box.y>canvas.height+box.h){box.y=box.h*-1}if(box.y<box.h*-1){box.y=canvas.height+box.h}box.x+=Math.cos(box.heading)*box.pps*secs;box.y+=Math.sin(box.heading)*box.pps*secs};var canvasObj=utils.createCanvas(),canvas=canvasObj.canvas,ctx=canvasObj.ctx;var state=demo.createState(canvas);var loop=function(){var now=new Date,t=now-state.lt,secs=t/1e3;requestAnimationFrame(loop);if(t>=1e3/state.FPS){state.currentPoint=state.points[Math.floor(state.bias*(state.points.length-1))];draw.back(ctx,canvas);draw.logPerPoints(ctx,state);draw.box(ctx,state.boxLogPer,"red");draw.box(ctx,state.boxPer,"lime");draw.info(ctx,state);demo.update(state,secs);state.lt=now}};loop();
