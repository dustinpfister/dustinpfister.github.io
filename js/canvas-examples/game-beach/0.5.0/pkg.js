/*
   canvas-example-game-beach
   Copyright 2020 by Dustin Pfister
   https://raw.githubusercontent.com/dustinpfister/canvas-examples/master/LICENSE
 
   https://github.com/dustinpfister/canvas-examples
*/
var utils={};utils.distance=function(x1,y1,x2,y2){return Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2))};utils.XP=function(){var set=function(xp){return(1+Math.sqrt(1+8*xp/50))/2};var XPto=function(level){return(Math.pow(level,2)-level)*50/2};var parseByXP=function(xp,cap){var l=set(xp);l=l>cap?cap:l;var level=Math.floor(l),forNext=XPto(level+1);return{level:level,levelFrac:l,xp:xp,forNext:l===cap?Infinity:forNext,toNext:l===cap?Infinity:forNext-xp}};return{parseByLevel:function(l,cap){return parseByXP(XPto(l,cap))},parseByXP:parseByXP}}();utils.createCanvas=function(opt){opt=opt||{};opt.container=opt.container||document.getElementById("canvas-app")||document.body;opt.canvas=document.createElement("canvas");opt.ctx=opt.canvas.getContext("2d");opt.canvas.className="canvas_example";opt.canvas.width=opt.width===undefined?320:opt.width;opt.canvas.height=opt.height===undefined?240:opt.height;opt.ctx.translate(.5,.5);opt.canvas.onselectstart=function(){return false};opt.container.appendChild(opt.canvas);return opt};utils.getCanvasRelative=function(e){var canvas=e.target,bx=canvas.getBoundingClientRect(),pos={x:(e.changedTouches?e.changedTouches[0].clientX:e.clientX)-bx.left,y:(e.changedTouches?e.changedTouches[0].clientY:e.clientY)-bx.top,bx:bx};pos.x=Math.floor(pos.x/canvas.scrollWidth*canvas.width);pos.y=Math.floor(pos.y/canvas.scrollHeight*canvas.height);e.preventDefault();return pos};var game=function(){var GRID={w:16,h:12,cellSize:16};var SPAWN={rate:.5,playerMax:10,enemyMax:10,shotMax:100,blastMax:50};var TURRET={maxKillLevel:10,minAttack:1,maxAttack:10,minAttackRange:3,maxAttackRange:7,minAccuracy:.4,maxAccuracy:.9,maxInaccuracy:2};var createCells=function(areaData){var i=0,len=GRID.w*GRID.h,cells=[];while(i<len){cells.push({i:i,x:i%GRID.w,y:Math.floor(i/GRID.w),areaType:areaData[i]===undefined?0:areaData[i],clear:true});i+=1}return cells};var getCell=function(state,x,y){return state.cells[GRID.w*y+x]};var getRandomCell=function(pool){return pool[Math.floor(pool.length*Math.random())]};var getAreas=function(state,areaType,clear){return state.cells.filter(function(cell){return String(cell.areaType)===String(areaType)&&(clear===undefined?true:clear===cell.clear)})};var getNear=function(state,cell,range,areaType){range=range||1;areaType=areaType===undefined?0:areaType;return state.cells.filter(function(target){return utils.distance(cell.x,cell.y,target.x,target.y)<=range}).filter(function(target){return String(areaType)===String(target.areaType)&&cell.i!=target.i}).filter(function(target){return target.clear})};var getBestTurretLands=function(state,range){var waterAreas=getAreas(state,0);return getAreas(state,2,true).map(function(cell){var count=0;waterAreas.forEach(function(waterCell){if(utils.distance(cell.x,cell.y,waterCell.x,waterCell.y)<=range){count+=1}});return{i:cell.i,cell:cell,waterCount:count}}).filter(function(obj){return obj.waterCount>0}).sort(function(a,b){if(a.waterCount>b.waterCount){return-1}if(a.waterCount<b.waterCount){return 1}return 0})};var getBorderWaters=function(state){return getAreas(state,0,true).filter(function(cell){return cell.x===0||cell.y==0||cell.x===GRID.w-1||cell.y===GRID.h-1})};var applyTurretKillLevel=function(tur){var per=tur.killLevel.level/TURRET.maxKillLevel,delta;delta=(TURRET.maxAttack-TURRET.minAttack)*per;tur.attack=TURRET.minAttack+delta;delta=(TURRET.maxAttackRange-TURRET.minAttackRange)*per;tur.attackRange=TURRET.minAttackRange+delta;delta=(TURRET.maxAccuracy-TURRET.minAccuracy)*per;tur.accuracy=TURRET.minAccuracy+delta};var spawn=function(state,secs){state.spawnSecs+=secs;if(state.spawnSecs>=SPAWN.rate){state.spawnSecs%=SPAWN.rate;if(state.pool.player.length<SPAWN.playerMax){var freeLands=getBestTurretLands(state,TURRET.minAttackRange);if(freeLands.length>=1){var land=freeLands[0].cell;land.clear=false;var turret={x:land.x,y:land.y,h:0,kills:0,killLevel:1,killsToNext:0,attack:5,attackRange:TURRET.minAttackRange,fireRate:.1,fireSecs:.2,accuracy:0,shotPPS:4,shotBlastRadius:1.5,shotAttack:2};turret.killLevel=utils.XP.parseByXP(turret.kills,TURRET.maxKillLevel);applyTurretKillLevel(turret);state.pool.player.push(turret)}}if(state.pool.enemy.length<SPAWN.enemyMax){var waters=getBorderWaters(state);if(waters.length>=1){var water=getRandomCell(waters);water.clear=false;state.pool.enemy.push({x:water.x,y:water.y,hp:100,hpMax:100,secs:0,speed:3})}}}};var updateBoats=function(state,secs){var i=state.pool.enemy.length,boat;while(i--){boat=state.pool.enemy[i];boat.secs+=secs;if(boat.secs>=boat.speed){boat.secs%=boat.speed;var near=getNear(state,boat,1.5,0);if(near.length>=1){var water=getRandomCell(near),current=getCell(state,boat.x,boat.y);current.clear=true;water.clear=false;boat.x=water.x;boat.y=water.y}}if(boat.hp===0){var cell=getCell(state,boat.x,boat.y);cell.clear=true;state.pool.enemy.splice(i,1);state.kills+=1}}};var updateTurrets=function(state,secs){var i=state.pool.player.length,turret;while(i--){turret=state.pool.player[i];turret.fireSecs-=secs;if(turret.fireSecs<=0){turret.fireSecs=turret.fireRate+Math.abs(turret.fireSecs)%turret.fireRate;var targets=state.pool.enemy.filter(function(boat){return utils.distance(boat.x,boat.y,turret.x,turret.y)<=turret.attackRange});if(targets.length>=1){var target=getRandomCell(targets);if(state.pool.shots.length<SPAWN.shotMax){var sx=turret.x+.5,sy=turret.y+.5,ma=TURRET.maxInaccuracy,tx=target.x+.5+(-ma+ma*2*Math.random())*(1-turret.accuracy),ty=target.y+.5+(-ma+ma*2*Math.random())*(1-turret.accuracy);turret.h=Math.atan2(ty-sy,tx-sx);state.pool.shots.push({shotFrom:turret,x:sx,y:sy,sx:sx,sy:sy,tx:tx,ty:ty,secs:0,d:utils.distance(sx,sy,tx,ty),h:turret.h,pps:turret.shotPPS,blastRadius:turret.shotBlastRadius,attack:turret.shotAttack})}}}}};var spawnBlast=function(state,shot){var i=state.pool.enemy.length,boat,dam,d;while(i--){boat=state.pool.enemy[i];d=utils.distance(shot.x,shot.y,boat.x+.5,boat.y+.5);if(d<=shot.blastRadius){dam=shot.attack-d/shot.blastRadius*shot.attack;boat.hp-=dam;boat.hp=boat.hp<0?0:boat.hp;var disp=shot.shotFrom;if(boat.hp===0&&disp!=undefined){disp.kills+=1;disp.killLevel=utils.XP.parseByXP(disp.kills,TURRET.maxKillLevel);applyTurretKillLevel(disp)}}}if(state.pool.blasts.length<SPAWN.blastMax){state.pool.blasts.push({x:shot.x,y:shot.y,secs:0,secsMax:1,radius:shot.blastRadius})}};var updateShots=function(state,secs){var i=state.pool.shots.length,shot;while(i--){shot=state.pool.shots[i];shot.secs+=secs;var d=shot.pps*shot.secs;d=d>shot.d?shot.d:d;shot.x=shot.sx+Math.cos(shot.h)*d;shot.y=shot.sy+Math.sin(shot.h)*d;if(d===shot.d){spawnBlast(state,shot);state.pool.shots.splice(i,1)}}};var api={GRID:GRID,SPAWN:SPAWN,TURRET:TURRET};api.create=function(opt){opt=opt||{};opt.areaData=opt.areaData||"";var state={ver:"0.5.0",cells:createCells(opt.areaData),lt:new Date,spawnSecs:0,kills:0,pool:{player:[],enemy:[],shots:[],blasts:[]},mapOffset:{x:32,y:32}};return state};api.update=function(state){var now=new Date,t=now-state.lt,secs=t/1e3;spawn(state,secs);updateBoats(state,secs);updateTurrets(state,secs);updateShots(state,secs);var i=state.pool.blasts.length;while(i--){var blast=state.pool.blasts[i];blast.secs+=secs;if(blast.secs>=blast.secsMax){state.pool.blasts.splice(i,1)}}state.lt=now};return api}();var draw=function(){var api={};api.back=function(ctx,canvas,op){ctx.fillStyle="rgba(0,0,0,"+op+")";ctx.fillRect(0,0,canvas.width,canvas.height)};api.cells=function(ctx,state){var i=state.cells.length,colors=["blue","yellow","green"],cellSize=game.GRID.cellSize,cell;while(i--){cell=state.cells[i];ctx.fillStyle=colors[cell.areaType];ctx.fillRect(state.mapOffset.x+cell.x*cellSize,state.mapOffset.y+cell.y*cellSize,cellSize,cellSize)}};var drawPool=function(ctx,state,poolName){var i=state.pool[poolName].length,colors={player:"purple",enemy:"red"},cellSize=game.GRID.cellSize;while(i--){disp=state.pool[poolName][i];ctx.fillStyle=colors[poolName];ctx.fillRect(state.mapOffset.x+disp.x*cellSize,state.mapOffset.y+disp.y*cellSize,cellSize,cellSize);if(disp.hp!=undefined){var per=disp.hp/disp.hpMax;ctx.fillStyle="lime";ctx.fillRect(state.mapOffset.x+disp.x*cellSize,state.mapOffset.y+disp.y*cellSize,cellSize*per,cellSize/4)}}};var drawTurrets=function(ctx,state){var i=state.pool.player.length,tur,cellSize=game.GRID.cellSize;while(i--){tur=state.pool.player[i];ctx.fillStyle="pink";ctx.save();ctx.translate(state.mapOffset.x+(tur.x+.5)*cellSize,state.mapOffset.y+(tur.y+.5)*cellSize);ctx.rotate(tur.h);ctx.beginPath();ctx.moveTo(6,0);ctx.lineTo(6*-1,6*-1);ctx.lineTo(6*-1,6);ctx.fill();ctx.restore();ctx.strokeStyle="rgba(255,255,255,0.2)";ctx.beginPath();ctx.arc(state.mapOffset.x+(tur.x+.5)*cellSize,state.mapOffset.y+(tur.y+.5)*cellSize,tur.attackRange*cellSize,0,Math.PI*2);ctx.stroke();ctx.fillStyle="white";ctx.textBaseline="top";ctx.font="8px arial";ctx.fillText(tur.killLevel.level,state.mapOffset.x+tur.x*cellSize,state.mapOffset.y+tur.y*cellSize)}};api.units=function(ctx,state){drawPool(ctx,state,"enemy");drawPool(ctx,state,"player");drawTurrets(ctx,state)};api.shots=function(ctx,state){var i=state.pool.shots.length,cellSize=game.GRID.cellSize,shot;ctx.fillStyle="white";while(i--){shot=state.pool.shots[i];ctx.beginPath();ctx.arc(state.mapOffset.x+shot.x*cellSize,state.mapOffset.y+shot.y*cellSize,2,0,Math.PI*2);ctx.fill()}};api.blasts=function(ctx,state){var i=state.pool.blasts.length,cellSize=game.GRID.cellSize,blast;while(i--){blast=state.pool.blasts[i];var per=blast.secs/blast.secsMax;per=per>1?1:per;ctx.beginPath();ctx.fillStyle="rgba(255,128,0,"+(.6-.55*per)+")";ctx.arc(state.mapOffset.x+blast.x*cellSize,state.mapOffset.y+blast.y*cellSize,blast.radius*cellSize*per,0,Math.PI*2);ctx.fill()}};api.info=function(ctx,state,yi){ctx.fillStyle="white";ctx.textBaseline="top";ctx.font="10px arial";ctx.fillText("v"+state.ver,10,10*yi);ctx.fillText("kills: "+state.kills,10,20*yi)};api.debugInfoTurrets=function(ctx,state,yi,op){var i=state.pool.player.length;ctx.fillStyle="rgba(255,255,255,"+op+")";ctx.textBaseline="top";ctx.font="10px arial";ctx.lineWidth=1;while(i--){var tur=state.pool.player[i];if(tur){var kl=tur.killLevel,text=i+") turret: { "+"k: "+tur.kills+", "+"kl: "+kl.level+", "+"at: "+tur.attack+", "+"r: "+tur.attackRange+", "+"ac: "+tur.accuracy+" }";ctx.fillText(text,10,10*(yi+i))}}};return api}();var canvasObj=utils.createCanvas(),canvas=canvasObj.canvas,ctx=canvasObj.ctx;var areaDataStrings=[""+"0000000000000000"+"0000000000000000"+"0000000001110000"+"0011111111210000"+"0012211222210000"+"0012222222211000"+"0011222222111000"+"0001122222111000"+"0001111122210000"+"0000001111110000"+"0000000000000000","2221111111111111"+"2211000000001111"+"1110000010000011"+"0000000121000001"+"1000000010010001"+"2100000000121001"+"1000100000010001"+"1001210000000000"+"0000121000001111"+"0000010000012211"+"0000001100122211"+"0000011110111111"];var state=game.create({areaData:areaDataStrings[1]});var lt=new Date,targetFPS=24,targetDelay=1e3/targetFPS;var loop=function(){var now=new Date,t=now-lt;requestAnimationFrame(loop);if(t>=targetDelay){game.update(state);draw.back(ctx,canvas,1);draw.cells(ctx,state);draw.units(ctx,state);draw.shots(ctx,state);draw.blasts(ctx,state);draw.back(ctx,canvas,.2);draw.info(ctx,state,1);lt=now}};loop();
